import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) throws IOException {
        String filePath = "/input.json";
        try (Scanner scanner = new Scanner(new FileReader(filePath))) {
            String json = scanner.useDelimiter("\\Z").next();
            scanner.close();

            String nValue = getJsonValue(json, "n");
            if (nValue == null) {
                System.err.println("Error: unable to find 'n' value in JSON");
                return;
            }
            int n = Integer.parseInt(nValue.replaceAll("[^\\d]", ""));

            String kValue = getJsonValue(json, "k");
            if (kValue == null) {
                System.err.println("Error: unable to find 'k' value in JSON");
                return;
            }
            int k = Integer.parseInt(kValue.replaceAll("[^\\d]", ""));

            long[][] points = new long[n][2];
            for (int i = 1; i <= n; i++) {
                String pointJson = getJsonValue(json, String.valueOf(i));
                if (pointJson == null) {
                    System.err.println("Error: unable to find point " + i + " in JSON");
                    return;
                }
                String base = getNestedJsonValue(pointJson, "base");
                if (base == null) {
                    System.err.println("Error: unable to find 'base' value in point " + i + " JSON");
                    return;
                }
                String value = getNestedJsonValue(pointJson, "value");
                if (value == null) {
                    System.err.println("Error: unable to find 'value' value in point " + i + " JSON");
                    return;
                }
                points[i - 1][0] = i;
                points[i - 1][1] = Long.parseLong(value, Integer.parseInt(base.replaceAll("[^\\d]", "")));
            }

            long secret = findSecret(points, k - 1);
            System.out.println("Secret: " + secret);
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    public static String getJsonValue(String json, String key) {
        int startIndex = json.indexOf("\"" + key + "\"");
        if (startIndex == -1) {
            return null;
        }
        startIndex = json.indexOf(":", startIndex);
        int endIndex = json.indexOf(",", startIndex);
        if (endIndex == -1) {
            endIndex = json.indexOf("}", startIndex);
        }
        String value = json.substring(startIndex + 1, endIndex).trim().replace("\"", "");
        return value;
    }

    public static String getJsonValue(String json, int key) {
        int startIndex = json.indexOf("\"" + key + "\"");
        if (startIndex == -1) {
            return null;
        }
        startIndex = json.indexOf("{", startIndex);
        int endIndex = json.indexOf("}", startIndex);
        return json.substring(startIndex + 1, endIndex).trim();
    }

    public static String getNestedJsonValue(String json, String key) {
        json = json.trim().replace("{", "").replace("}", "");
        String[] pairs = json.split(",");
        for (String pair : pairs) {
            pair = pair.trim();
            if (pair.startsWith("\"" + key + "\"")) {
                return pair.split(":")[1].trim().replace("\"", "");
            }
        }
        return null;
    }

    public static long findSecret(long[][] points, int degree) {
        long secret = 0;
        for (int i = 0; i < points.length; i++) {
            long numerator = 1;
            long denominator = 1;
            for (int j = 0; j < points.length; j++) {
                if (i != j) {
                    numerator *= -points[j][0];
                    denominator *= points[i][0] - points[j][0];
                }
            }
            secret += points[i][1] * numerator / denominator;
        }
        return secret;
    }
}
